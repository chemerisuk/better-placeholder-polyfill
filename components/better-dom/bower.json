{
  "name": "better-dom",
  "version": "1.0.0-beta.1",
  "main": [
    "better-dom.js",
    "better-dom.htc"
  ],
  "ignore": [
    ".*",
    "test",
    "src"
  ],
  "dependencies": {},
  "devDependencies": {
    "lodash": "1.2.1",
    "jquery": "1.10.0",
    "google-code-prettify": "1.0.0",
    "jasmine": "1.3.1",
    "d3": "2.7.0"
  },
  "gitHead": "916a0f35d605652666a6e9b4bc0cde886a3a0215",
  "readme": "better-dom [![Build Status](https://api.travis-ci.org/chemerisuk/better-dom.png?branch=master)](http://travis-ci.org/chemerisuk/better-dom)\n==========\nMaking DOM to be nice.\n\n## Installation\nThe simplest way is to use [bower](http://bower.io/):\n\n    bower install better-dom\n\nThis will clone the latest version of the library into the `components` directory at the root of your project.\n\nThen include script below on your web page:\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    ...    \n</head>\n<body>\n    ...\n    <script src=\"components/build/better-dom.js\" data-htc=\"components/extra/better-dom.htc\"></script>\n</body>\n</html>\n```\n\n## Unobtrusive extensions\nThe idea is to write DOM additions declaratively. `DOM.extend` used to define a new extension and after the call any existing matched element will be initialized with an appropriate constructor. But the coolest thing is that the same will happen even for HTML content inserted dynamically via `innerHTML` or any other javascript framework.\n\nNo need to worry about when and how the extension will be initialized. As a result it's much simpler to create your own [components](#elastic-textarea) or to write [polyfills](#placeholder-polyfill) for old browsers.\n\n#### elastic textarea example\nThis is a textarea extension which autoresizes itself to contain all entered text:\n\n```js\nDOM.extend(\"textarea.elastic\", [\n    \"div[style=position:relative]>pre[style=visibility:hidden;margin:0;border-style:solid]>span[style=display:inline-block;white-space:pre-wrap]\"\n], {\n    constructor: function(wrapper) {\n        var holder = wrapper.child(0),\n            span = holder.child(0);\n\n        this.on(\"input\", this._syncWithHolder, [span])._syncWithHolder(span);\n\n        this.parent(\"form\").on(\"reset\", this._syncWithHolder, [span, true], this);\n\n        holder.setStyle({\n            \"font\": this.getStyle(\"font\"),\n            \"padding\": this.getStyle(\"padding\"),\n            \"border-width\": this.getStyle(\"border-width\")\n        });\n\n        wrapper.append(this.after(wrapper));\n    },\n    _syncWithHolder: function(span, defaultValue) {\n        value = this.get(defaultValue ? \"defaultValue\" : \"value\");\n\n        // use &nbsp; to fix issue with adding a new line\n        if (value[value.length - 1] === \"\\n\") value += \"&nbsp;\";\n        \n        // IE doesn't respect newlines so use <br> instead\n        span.set(value.split(\"\\n\").join(\"<br>\"));\n    }\n});\n\nDOM.importStyles(\"textarea.elastic\", {\n    position: \"absolute\",\n    left: 0,\n    top: 0,\n    width: \"100%\",\n    height: \"100%\",\n    overflow: \"hidden\",\n    resize: \"none\",\n    \"box-sizing\": \"border-box\"\n});\n```\nCheck out [live demo](http://chemerisuk.github.io/better-elastic-textarea/).\n\n#### placeholder polyfill example\nThe extension polyfills `[placeholder]` for old browsers\n```js\nDOM.supports(\"placeholder\", \"input\") || DOM.extend(\"[placeholder]\", [\n    \"input[style='box-sizing: border-box; position: absolute; color: graytext; background: none no-repeat 0 0; border-color: transparent']\"\n], {\n    constructor: function(holder) {\n        var offset = this.offset();\n\n        this\n            .on(\"focus\", holder.hide, holder)\n            .on(\"blur\", this._showPlaceholder, [holder]);\n\n        holder\n            .set(this.get(\"placeholder\"))\n            .setStyle(\"width\", offset.right - offset.left)\n            .on(\"click\", this.fire, [\"focus\"], this);\n\n        if (this.get() || this.isFocused()) holder.hide();\n\n        this.before(holder);\n    },\n    _showPlaceholder: function(holder) {\n        if (!this.get()) holder.show();\n    }\n});\n```\nCheck out [live demo](http://chemerisuk.github.io/better-placeholder-polyfill/) (open in IE < 10).\n\n#### more code: dateinput polyfill\nThe extension makes `input[type=date]` controls with the same UX for all browsers.\n\nCheck out the [extension repository](https://github.com/chemerisuk/better-dateinput-polyfill).\n\n## Emmet expressions support\nHTML strings are boring and complex, they take a lot of space. Let's fix that with [emmet](http://emmet.io/):\n\n* `nav>ul>li` -> `<nav><ul><li></li></ul></nav>`\n* `form#search.wide` -> `<form id=\"search\" class=\"wide\"></form>`\n* `[a='value1' b=\"value2\"]` -> `<div a=\"value1\" b=\"value2\"></div>`\n* `ul>li.item$*3` -> `<ul><li class=\"item1\"></li><li class=\"item2\"></li><li class=\"item3\"></li></ul>`\n\nBecause of code size emmet expressions support is only for HTML strings and has some limitations for now, but major features are in place.\n\n\n## Event handling best practices\nEvents handling is a big part of writing code for DOM. And there are some features included to the library APIs that force developers to prevent known issues in their code.\n\n#### Get rid of the event object\nEvent handlers don't own an event object now and this thing improves testability of your code:\n\n```js\n// NOTICE: handler don't have e as the first argument\nDOM.find(\"#link\").on(\"click\", function() {...});\n// NOTICE: the second options argument\nDOM.find(\"#link\").on(\"keydown\", {args: [\"keyCode\", \"altKey\"]}, function(keyCode, altKey) {...});\n```\n\n#### Call preventDefault() or stopPropagation() before logic\nIt's a common situation to work with unsafe code that can throw an exception. If preventDefault() or stopPropagation() are called at the end of logic than program may start to work unexpected.\n\n```js\n// NOTICE: preventDefault is always called before the handler\nDOM.find(\"#link\").on(\"click\", {cancel: true}, handler);\n// NOTICE: stopPropagation os always called before the handler\nDOM.find(\"#link\").on(\"click\", {stop: true}, handler);\n```\n\n#### Callback systems are brittle\nThe library doesn't use callback arrays, so any event listener can't break another one (read the nice [article](http://dean.edwards.name/weblog/2009/03/callbacks-vs-events/) for additional details).\n\n```js\nDOM.ready(function() { throw Error(\"exception in a bad code\"); });\n// NOTICE: you'll always see the message in console\nDOM.ready(function() { console.log(\"Nothing can break your code\") });\n```\n\n## Performance\nDOM is usually the main bottleneck of javascript applications. Therefore performance question should be on the top for any library that works with it.\n\n## Browser support\n* Chrome\n* Safari\n* Firefox\n* Opera\n* IE8+\n",
  "readmeFilename": "README.md",
  "_id": "better-dom@1.0.0-beta.1",
  "description": "better-dom [![Build Status](https://api.travis-ci.org/chemerisuk/better-dom.png?branch=master)](http://travis-ci.org/chemerisuk/better-dom) ========== Making DOM to be nice.",
  "repository": {
    "type": "git",
    "url": "git://github.com/chemerisuk/better-dom"
  }
}